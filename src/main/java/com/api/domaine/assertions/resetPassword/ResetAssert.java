package com.api.domaine.assertions.resetPassword;

import com.api.domaine.resetPassword.Data;
import com.api.domaine.resetPassword.Reset;
import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link Reset} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ResetAssert extends AbstractAssert<ResetAssert, Reset> {

  /**
   * Creates a new <code>{@link ResetAssert}</code> to make assertions on actual Reset.
   * @param actual the Reset we want to make assertions on.
   */
  public ResetAssert(Reset actual) {
    super(actual, ResetAssert.class);
  }

  /**
   * An entry point for ResetAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myReset)</code> and get specific assertion with code completion.
   * @param actual the Reset we want to make assertions on.
   * @return a new <code>{@link ResetAssert}</code>
   */
  public static ResetAssert assertThat(Reset actual) {
    return new ResetAssert(actual);
  }

  /**
   * Verifies that the actual Reset's additionalProperties is equal to the given one.
   * @param additionalProperties the given additionalProperties to compare the actual Reset's additionalProperties to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Reset's additionalProperties is not equal to the given one.
   */
  public ResetAssert hasAdditionalProperties(java.util.Map additionalProperties) {
    // check that actual Reset we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting additionalProperties of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.util.Map actualAdditionalProperties = actual.getAdditionalProperties();
    if (!Objects.areEqual(actualAdditionalProperties, additionalProperties)) {
      failWithMessage(assertjErrorMessage, actual, additionalProperties, actualAdditionalProperties);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Reset's code is equal to the given one.
   * @param code the given code to compare the actual Reset's code to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Reset's code is not equal to the given one.
   */
  public ResetAssert hasCode(String code) {
    // check that actual Reset we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting code of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualCode = actual.getCode();
    if (!Objects.areEqual(actualCode, code)) {
      failWithMessage(assertjErrorMessage, actual, code, actualCode);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Reset's data is equal to the given one.
   * @param data the given data to compare the actual Reset's data to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Reset's data is not equal to the given one.
   */
  public ResetAssert hasData(Data data) {
    // check that actual Reset we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting data of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Data actualData = actual.getData();
    if (!Objects.areEqual(actualData, data)) {
      failWithMessage(assertjErrorMessage, actual, data, actualData);
    }

    // return the current assertion for method chaining
    return this;
  }

}
