package com.api.domaine.assertions;

import com.api.domaine.CurrentUser;
import com.api.domaine.Team;
import com.api.domaine.User;
import org.assertj.core.api.AbstractAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link CurrentUser} specific assertions - Generated by CustomAssertionGenerator.
 */
public class CurrentUserAssert extends AbstractAssert<CurrentUserAssert, CurrentUser> {

  /**
   * Creates a new <code>{@link CurrentUserAssert}</code> to make assertions on actual CurrentUser.
   * @param actual the CurrentUser we want to make assertions on.
   */
  public CurrentUserAssert(CurrentUser actual) {
    super(actual, CurrentUserAssert.class);
  }

  /**
   * An entry point for CurrentUserAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myCurrentUser)</code> and get specific assertion with code completion.
   * @param actual the CurrentUser we want to make assertions on.
   * @return a new <code>{@link CurrentUserAssert}</code>
   */
  public static CurrentUserAssert assertThat(CurrentUser actual) {
    return new CurrentUserAssert(actual);
  }

  /**
   * Verifies that the actual CurrentUser's additionalProperties is equal to the given one.
   * @param additionalProperties the given additionalProperties to compare the actual CurrentUser's additionalProperties to.
   * @return this assertion object.
   * @throws AssertionError - if the actual CurrentUser's additionalProperties is not equal to the given one.
   */
  public CurrentUserAssert hasAdditionalProperties(java.util.Map additionalProperties) {
    // check that actual CurrentUser we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting additionalProperties of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.util.Map actualAdditionalProperties = actual.getAdditionalProperties();
    if (!Objects.areEqual(actualAdditionalProperties, additionalProperties)) {
      failWithMessage(assertjErrorMessage, actual, additionalProperties, actualAdditionalProperties);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual CurrentUser's rosterPositions contains the given String elements.
   * @param rosterPositions the given elements that should be contained in actual CurrentUser's rosterPositions.
   * @return this assertion object.
   * @throws AssertionError if the actual CurrentUser's rosterPositions does not contain all given String elements.
   */
  public CurrentUserAssert hasRosterPositions(String... rosterPositions) {
    // check that actual CurrentUser we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (rosterPositions == null) failWithMessage("Expecting rosterPositions parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getRosterPositions(), rosterPositions);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual CurrentUser's rosterPositions contains <b>only<b> the given String elements and nothing else in whatever order.
   * @param rosterPositions the given elements that should be contained in actual CurrentUser's rosterPositions.
   * @return this assertion object.
   * @throws AssertionError if the actual CurrentUser's rosterPositions does not contain all given String elements.
   */
  public CurrentUserAssert hasOnlyRosterPositions(String... rosterPositions) {
    // check that actual CurrentUser we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (rosterPositions == null) failWithMessage("Expecting rosterPositions parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getRosterPositions(), rosterPositions);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual CurrentUser's rosterPositions does not contain the given String elements.
   *
   * @param rosterPositions the given elements that should not be in actual CurrentUser's rosterPositions.
   * @return this assertion object.
   * @throws AssertionError if the actual CurrentUser's rosterPositions contains any given String elements.
   */
  public CurrentUserAssert doesNotHaveRosterPositions(String... rosterPositions) {
    // check that actual CurrentUser we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (rosterPositions == null) failWithMessage("Expecting rosterPositions parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getRosterPositions(), rosterPositions);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual CurrentUser has no rosterPositions.
   * @return this assertion object.
   * @throws AssertionError if the actual CurrentUser's rosterPositions is not empty.
   */
  public CurrentUserAssert hasNoRosterPositions() {
    // check that actual CurrentUser we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have rosterPositions but had :\n  <%s>";
    
    // check
    if (actual.getRosterPositions().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getRosterPositions());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual CurrentUser's team is equal to the given one.
   * @param team the given team to compare the actual CurrentUser's team to.
   * @return this assertion object.
   * @throws AssertionError - if the actual CurrentUser's team is not equal to the given one.
   */
  public CurrentUserAssert hasTeam(Team team) {
    // check that actual CurrentUser we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting team of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Team actualTeam = actual.getTeam();
    if (!Objects.areEqual(actualTeam, team)) {
      failWithMessage(assertjErrorMessage, actual, team, actualTeam);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual CurrentUser's token is equal to the given one.
   * @param token the given token to compare the actual CurrentUser's token to.
   * @return this assertion object.
   * @throws AssertionError - if the actual CurrentUser's token is not equal to the given one.
   */
  public CurrentUserAssert hasToken(String token) {
    // check that actual CurrentUser we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting token of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualToken = actual.getToken();
    if (!Objects.areEqual(actualToken, token)) {
      failWithMessage(assertjErrorMessage, actual, token, actualToken);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual CurrentUser's user is equal to the given one.
   * @param user the given user to compare the actual CurrentUser's user to.
   * @return this assertion object.
   * @throws AssertionError - if the actual CurrentUser's user is not equal to the given one.
   */
  public CurrentUserAssert hasUser(User user) {
    // check that actual CurrentUser we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting user of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    User actualUser = actual.getUser();
    if (!Objects.areEqual(actualUser, user)) {
      failWithMessage(assertjErrorMessage, actual, user, actualUser);
    }

    // return the current assertion for method chaining
    return this;
  }

}
