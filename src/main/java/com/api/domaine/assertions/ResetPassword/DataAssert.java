package com.api.domaine.assertions.ResetPassword;

import com.api.domaine.ResetPassword.Data;
import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link Data} specific assertions - Generated by CustomAssertionGenerator.
 */
public class DataAssert extends AbstractAssert<DataAssert, Data> {

  /**
   * Creates a new <code>{@link DataAssert}</code> to make assertions on actual Data.
   * @param actual the Data we want to make assertions on.
   */
  public DataAssert(Data actual) {
    super(actual, DataAssert.class);
  }

  /**
   * An entry point for DataAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myData)</code> and get specific assertion with code completion.
   * @param actual the Data we want to make assertions on.
   * @return a new <code>{@link DataAssert}</code>
   */
  public static DataAssert assertThat(Data actual) {
    return new DataAssert(actual);
  }

  /**
   * Verifies that the actual Data's accessLevel is equal to the given one.
   * @param accessLevel the given accessLevel to compare the actual Data's accessLevel to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Data's accessLevel is not equal to the given one.
   */
  public DataAssert hasAccessLevel(Integer accessLevel) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting accessLevel of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualAccessLevel = actual.getAccessLevel();
    if (!Objects.areEqual(actualAccessLevel, accessLevel)) {
      failWithMessage(assertjErrorMessage, actual, accessLevel, actualAccessLevel);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's additionalProperties is equal to the given one.
   * @param additionalProperties the given additionalProperties to compare the actual Data's additionalProperties to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Data's additionalProperties is not equal to the given one.
   */
  public DataAssert hasAdditionalProperties(java.util.Map additionalProperties) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting additionalProperties of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.util.Map actualAdditionalProperties = actual.getAdditionalProperties();
    if (!Objects.areEqual(actualAdditionalProperties, additionalProperties)) {
      failWithMessage(assertjErrorMessage, actual, additionalProperties, actualAdditionalProperties);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's birthDate is equal to the given one.
   * @param birthDate the given birthDate to compare the actual Data's birthDate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Data's birthDate is not equal to the given one.
   */
  public DataAssert hasBirthDate(String birthDate) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting birthDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualBirthDate = actual.getBirthDate();
    if (!Objects.areEqual(actualBirthDate, birthDate)) {
      failWithMessage(assertjErrorMessage, actual, birthDate, actualBirthDate);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's client is equal to the given one.
   * @param client the given client to compare the actual Data's client to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Data's client is not equal to the given one.
   */
  public DataAssert hasClient(String client) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting client of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualClient = actual.getClient();
    if (!Objects.areEqual(actualClient, client)) {
      failWithMessage(assertjErrorMessage, actual, client, actualClient);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's email is equal to the given one.
   * @param email the given email to compare the actual Data's email to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Data's email is not equal to the given one.
   */
  public DataAssert hasEmail(String email) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting email of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualEmail = actual.getEmail();
    if (!Objects.areEqual(actualEmail, email)) {
      failWithMessage(assertjErrorMessage, actual, email, actualEmail);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's firstName is equal to the given one.
   * @param firstName the given firstName to compare the actual Data's firstName to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Data's firstName is not equal to the given one.
   */
  public DataAssert hasFirstName(String firstName) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting firstName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualFirstName = actual.getFirstName();
    if (!Objects.areEqual(actualFirstName, firstName)) {
      failWithMessage(assertjErrorMessage, actual, firstName, actualFirstName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's height is equal to the given one.
   * @param height the given height to compare the actual Data's height to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Data's height is not equal to the given one.
   */
  public DataAssert hasHeight(Integer height) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting height of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualHeight = actual.getHeight();
    if (!Objects.areEqual(actualHeight, height)) {
      failWithMessage(assertjErrorMessage, actual, height, actualHeight);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's id is equal to the given one.
   * @param id the given id to compare the actual Data's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Data's id is not equal to the given one.
   */
  public DataAssert hasId(String id) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's lastName is equal to the given one.
   * @param lastName the given lastName to compare the actual Data's lastName to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Data's lastName is not equal to the given one.
   */
  public DataAssert hasLastName(String lastName) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting lastName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualLastName = actual.getLastName();
    if (!Objects.areEqual(actualLastName, lastName)) {
      failWithMessage(assertjErrorMessage, actual, lastName, actualLastName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's neverUpdated is equal to the given one.
   * @param neverUpdated the given neverUpdated to compare the actual Data's neverUpdated to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Data's neverUpdated is not equal to the given one.
   */
  public DataAssert hasNeverUpdated(Boolean neverUpdated) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting neverUpdated of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Boolean actualNeverUpdated = actual.getNeverUpdated();
    if (!Objects.areEqual(actualNeverUpdated, neverUpdated)) {
      failWithMessage(assertjErrorMessage, actual, neverUpdated, actualNeverUpdated);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's photo is equal to the given one.
   * @param photo the given photo to compare the actual Data's photo to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Data's photo is not equal to the given one.
   */
  public DataAssert hasPhoto(String photo) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting photo of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualPhoto = actual.getPhoto();
    if (!Objects.areEqual(actualPhoto, photo)) {
      failWithMessage(assertjErrorMessage, actual, photo, actualPhoto);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's rosterPosition is equal to the given one.
   * @param rosterPosition the given rosterPosition to compare the actual Data's rosterPosition to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Data's rosterPosition is not equal to the given one.
   */
  public DataAssert hasRosterPosition(String rosterPosition) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting rosterPosition of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualRosterPosition = actual.getRosterPosition();
    if (!Objects.areEqual(actualRosterPosition, rosterPosition)) {
      failWithMessage(assertjErrorMessage, actual, rosterPosition, actualRosterPosition);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's type is equal to the given one.
   * @param type the given type to compare the actual Data's type to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Data's type is not equal to the given one.
   */
  public DataAssert hasType(String type) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting type of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualType = actual.getType();
    if (!Objects.areEqual(actualType, type)) {
      failWithMessage(assertjErrorMessage, actual, type, actualType);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's username is equal to the given one.
   * @param username the given username to compare the actual Data's username to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Data's username is not equal to the given one.
   */
  public DataAssert hasUsername(String username) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting username of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualUsername = actual.getUsername();
    if (!Objects.areEqual(actualUsername, username)) {
      failWithMessage(assertjErrorMessage, actual, username, actualUsername);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's v is equal to the given one.
   * @param v the given v to compare the actual Data's v to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Data's v is not equal to the given one.
   */
  public DataAssert hasV(Integer v) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting v of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualV = actual.getV();
    if (!Objects.areEqual(actualV, v)) {
      failWithMessage(assertjErrorMessage, actual, v, actualV);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's weight is equal to the given one.
   * @param weight the given weight to compare the actual Data's weight to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Data's weight is not equal to the given one.
   */
  public DataAssert hasWeight(Integer weight) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting weight of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualWeight = actual.getWeight();
    if (!Objects.areEqual(actualWeight, weight)) {
      failWithMessage(assertjErrorMessage, actual, weight, actualWeight);
    }

    // return the current assertion for method chaining
    return this;
  }

}
