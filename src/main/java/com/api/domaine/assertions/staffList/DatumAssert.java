package com.api.domaine.assertions.staffList;

import com.api.domaine.staffList.Datum;
import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link Datum} specific assertions - Generated by CustomAssertionGenerator.
 */
public class DatumAssert extends AbstractAssert<DatumAssert, Datum> {

  /**
   * Creates a new <code>{@link DatumAssert}</code> to make assertions on actual Datum.
   * @param actual the Datum we want to make assertions on.
   */
  public DatumAssert(Datum actual) {
    super(actual, DatumAssert.class);
  }

  /**
   * An entry point for DatumAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myDatum)</code> and get specific assertion with code completion.
   * @param actual the Datum we want to make assertions on.
   * @return a new <code>{@link DatumAssert}</code>
   */
  public static DatumAssert assertThat(Datum actual) {
    return new DatumAssert(actual);
  }

  /**
   * Verifies that the actual Datum's accessLevel is equal to the given one.
   * @param accessLevel the given accessLevel to compare the actual Datum's accessLevel to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Datum's accessLevel is not equal to the given one.
   */
  public DatumAssert hasAccessLevel(Integer accessLevel) {
    // check that actual Datum we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting accessLevel of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualAccessLevel = actual.getAccessLevel();
    if (!Objects.areEqual(actualAccessLevel, accessLevel)) {
      failWithMessage(assertjErrorMessage, actual, accessLevel, actualAccessLevel);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Datum's additionalProperties is equal to the given one.
   * @param additionalProperties the given additionalProperties to compare the actual Datum's additionalProperties to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Datum's additionalProperties is not equal to the given one.
   */
  public DatumAssert hasAdditionalProperties(java.util.Map additionalProperties) {
    // check that actual Datum we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting additionalProperties of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.util.Map actualAdditionalProperties = actual.getAdditionalProperties();
    if (!Objects.areEqual(actualAdditionalProperties, additionalProperties)) {
      failWithMessage(assertjErrorMessage, actual, additionalProperties, actualAdditionalProperties);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Datum's client is equal to the given one.
   * @param client the given client to compare the actual Datum's client to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Datum's client is not equal to the given one.
   */
  public DatumAssert hasClient(String client) {
    // check that actual Datum we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting client of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualClient = actual.getClient();
    if (!Objects.areEqual(actualClient, client)) {
      failWithMessage(assertjErrorMessage, actual, client, actualClient);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Datum's email is equal to the given one.
   * @param email the given email to compare the actual Datum's email to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Datum's email is not equal to the given one.
   */
  public DatumAssert hasEmail(String email) {
    // check that actual Datum we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting email of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualEmail = actual.getEmail();
    if (!Objects.areEqual(actualEmail, email)) {
      failWithMessage(assertjErrorMessage, actual, email, actualEmail);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Datum's firstName is equal to the given one.
   * @param firstName the given firstName to compare the actual Datum's firstName to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Datum's firstName is not equal to the given one.
   */
  public DatumAssert hasFirstName(String firstName) {
    // check that actual Datum we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting firstName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualFirstName = actual.getFirstName();
    if (!Objects.areEqual(actualFirstName, firstName)) {
      failWithMessage(assertjErrorMessage, actual, firstName, actualFirstName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Datum's id is equal to the given one.
   * @param id the given id to compare the actual Datum's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Datum's id is not equal to the given one.
   */
  public DatumAssert hasId(String id) {
    // check that actual Datum we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Datum's lastName is equal to the given one.
   * @param lastName the given lastName to compare the actual Datum's lastName to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Datum's lastName is not equal to the given one.
   */
  public DatumAssert hasLastName(String lastName) {
    // check that actual Datum we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting lastName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualLastName = actual.getLastName();
    if (!Objects.areEqual(actualLastName, lastName)) {
      failWithMessage(assertjErrorMessage, actual, lastName, actualLastName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Datum's neverUpdated is equal to the given one.
   * @param neverUpdated the given neverUpdated to compare the actual Datum's neverUpdated to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Datum's neverUpdated is not equal to the given one.
   */
  public DatumAssert hasNeverUpdated(Boolean neverUpdated) {
    // check that actual Datum we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting neverUpdated of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Boolean actualNeverUpdated = actual.getNeverUpdated();
    if (!Objects.areEqual(actualNeverUpdated, neverUpdated)) {
      failWithMessage(assertjErrorMessage, actual, neverUpdated, actualNeverUpdated);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Datum's phoneNumber is equal to the given one.
   * @param phoneNumber the given phoneNumber to compare the actual Datum's phoneNumber to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Datum's phoneNumber is not equal to the given one.
   */
  public DatumAssert hasPhoneNumber(String phoneNumber) {
    // check that actual Datum we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting phoneNumber of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualPhoneNumber = actual.getPhoneNumber();
    if (!Objects.areEqual(actualPhoneNumber, phoneNumber)) {
      failWithMessage(assertjErrorMessage, actual, phoneNumber, actualPhoneNumber);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Datum's photo is equal to the given one.
   * @param photo the given photo to compare the actual Datum's photo to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Datum's photo is not equal to the given one.
   */
  public DatumAssert hasPhoto(String photo) {
    // check that actual Datum we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting photo of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualPhoto = actual.getPhoto();
    if (!Objects.areEqual(actualPhoto, photo)) {
      failWithMessage(assertjErrorMessage, actual, photo, actualPhoto);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Datum's role is equal to the given one.
   * @param role the given role to compare the actual Datum's role to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Datum's role is not equal to the given one.
   */
  public DatumAssert hasRole(String role) {
    // check that actual Datum we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting role of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualRole = actual.getRole();
    if (!Objects.areEqual(actualRole, role)) {
      failWithMessage(assertjErrorMessage, actual, role, actualRole);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Datum's rosterPosition is equal to the given one.
   * @param rosterPosition the given rosterPosition to compare the actual Datum's rosterPosition to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Datum's rosterPosition is not equal to the given one.
   */
  public DatumAssert hasRosterPosition(String rosterPosition) {
    // check that actual Datum we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting rosterPosition of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualRosterPosition = actual.getRosterPosition();
    if (!Objects.areEqual(actualRosterPosition, rosterPosition)) {
      failWithMessage(assertjErrorMessage, actual, rosterPosition, actualRosterPosition);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Datum's type is equal to the given one.
   * @param type the given type to compare the actual Datum's type to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Datum's type is not equal to the given one.
   */
  public DatumAssert hasType(String type) {
    // check that actual Datum we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting type of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualType = actual.getType();
    if (!Objects.areEqual(actualType, type)) {
      failWithMessage(assertjErrorMessage, actual, type, actualType);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Datum's username is equal to the given one.
   * @param username the given username to compare the actual Datum's username to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Datum's username is not equal to the given one.
   */
  public DatumAssert hasUsername(String username) {
    // check that actual Datum we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting username of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualUsername = actual.getUsername();
    if (!Objects.areEqual(actualUsername, username)) {
      failWithMessage(assertjErrorMessage, actual, username, actualUsername);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Datum's v is equal to the given one.
   * @param v the given v to compare the actual Datum's v to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Datum's v is not equal to the given one.
   */
  public DatumAssert hasV(Integer v) {
    // check that actual Datum we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting v of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualV = actual.getV();
    if (!Objects.areEqual(actualV, v)) {
      failWithMessage(assertjErrorMessage, actual, v, actualV);
    }

    // return the current assertion for method chaining
    return this;
  }

}
